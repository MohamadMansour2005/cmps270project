#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>

#define GRID_SIZE 10
#define NUM_SHIPS 4

// Define symbols for grid
#define WATER '~'
#define HIT '*'
#define MISS 'o'
#define SHIP '#'

// Define ship sizes and names
const int ship_sizes[NUM_SHIPS] = {5, 4, 3, 2}; // Carrier, Battleship, Destroyer, Submarine
const char *ship_names[NUM_SHIPS] = {"Carrier", "Battleship", "Destroyer", "Submarine"};

// Player struct to hold player data
typedef struct {
    char name[50];
    char grid[GRID_SIZE][GRID_SIZE];
    int ships_remaining;
    int radar_uses;
    int smoke_screens;
    int artillery_unlocked;
    int torpedo_unlocked;
} Player;

// Function declarations
void initialize_grid(char grid[GRID_SIZE][GRID_SIZE]);
void display_grid(char grid[GRID_SIZE][GRID_SIZE], int reveal_all);
int choose_random_player();
int place_ship(char grid[GRID_SIZE][GRID_SIZE], int size, int x, int y, char orientation);
void setup_player(Player *player);
void take_turn(Player *attacker, Player *defender);
int is_game_over(Player *defender);
void execute_fire(Player *attacker, Player *defender, int x, int y);
void execute_radar(Player *attacker, Player *defender, int x, int y);
void execute_smoke(Player *attacker, int x, int y);
void execute_artillery(Player *attacker, Player *defender, int x, int y);
void execute_torpedo(Player *attacker, Player *defender, int row, int col, int is_row);

int main() {
    srand(time(NULL)); // Initialize random seed

    // Initialize players
    Player players[2];
    printf("Enter name for Player 1: ");
    scanf("%s", players[0].name);
    printf("Enter name for Player 2: ");
    scanf("%s", players[1].name);

    // Initialize grids and player properties
    for (int i = 0; i < 2; i++) {
        initialize_grid(players[i].grid);
        players[i].ships_remaining = NUM_SHIPS;
        players[i].radar_uses = 3;
        players[i].smoke_screens = 0;
        players[i].artillery_unlocked = 0;
        players[i].torpedo_unlocked = 0;
    }

    // Setup ships for each player
    setup_player(&players[0]);
    setup_player(&players[1]);

    // Randomly choose the starting player
    int current_player = choose_random_player();
    printf("%s will start the game!\n", players[current_player].name);

    // Main game loop
    while (1) {
        display_grid(players[1 - current_player].grid, 0);
        take_turn(&players[current_player], &players[1 - current_player]);

        // Check for game over after each turn
        if (is_game_over(&players[1 - current_player])) {
            printf("Game Over! %s wins!\n", players[current_player].name);
            break;
        }

        // Switch to the next player
        current_player = 1 - current_player;
    }
    return 0;
}

// Initialize the grid with water symbols
void initialize_grid(char grid[GRID_SIZE][GRID_SIZE]) {
    for (int i = 0; i < GRID_SIZE; i++) {
        for (int j = 0; j < GRID_SIZE; j++) {
            grid[i][j] = WATER;
        }
    }
}

// Display the grid, optionally revealing hits/misses only
void display_grid(char grid[GRID_SIZE][GRID_SIZE], int reveal_all) {
    printf("  A B C D E F G H I J\n");
    for (int i = 0; i < GRID_SIZE; i++) {
        printf("%2d ", i + 1);
        for (int j = 0; j < GRID_SIZE; j++) {
            if (reveal_all || grid[i][j] == HIT || grid[i][j] == MISS) {
                printf("%c ", grid[i][j]);
            } else {
                printf("%c ", WATER);
            }
        }
        printf("\n");
    }
}

// Choose a random player to start
int choose_random_player() {
    return rand() % 2;
}

// Place a ship on the grid with validation for overlaps and boundaries
int place_ship(char grid[GRID_SIZE][GRID_SIZE], int size, int x, int y, char orientation) {
    // Horizontal placement check
    if (orientation == 'H') {
        if (y + size > GRID_SIZE) return 0;
        for (int i = 0; i < size; i++) {
            if (grid[x][y + i] != WATER) return 0;
        }
        for (int i = 0; i < size; i++) {
            grid[x][y + i] = SHIP;
        }
    }
    // Vertical placement check
    else if (orientation == 'V') {
        if (x + size > GRID_SIZE) return 0;
        for (int i = 0; i < size; i++) {
            if (grid[x + i][y] != WATER) return 0;
        }
        for (int i = 0; i < size; i++) {
            grid[x + i][y] = SHIP;
        }
    }
    return 1;
}

// Set up a player's ships by placing them on the grid
void setup_player(Player *player) {
    printf("Setting up %s's board:\n", player->name);
    for (int i = 0; i < NUM_SHIPS; i++) {
        int x, y;
        char orientation;
        int success = 0;
        while (!success) {
            printf("Enter starting coordinates and orientation (H/V) for %s (size %d): ", ship_names[i], ship_sizes[i]);
            char col;
            scanf(" %c%d %c", &col, &x, &orientation);
            x--; // Convert to zero-based row index
            y = col - 'A'; // Convert column to zero-based index
            success = place_ship(player->grid, ship_sizes[i], x, y, orientation);
            if (!success) printf("Invalid placement. Try again.\n");
        }
    }
}

// Handle a player's turn, offering all command options
void take_turn(Player *attacker, Player *defender) {
    int x, y;
    char command[20];
    printf("%s, enter a command (Fire, Radar, Smoke, Artillery, Torpedo): ", attacker->name);
    scanf("%s", command);

    if (strcmp(command, "Fire") == 0) {
        char col;
        printf("Enter target coordinates (e.g., B3): ");
        scanf(" %c%d", &col, &x);
        x--; // Convert to zero-based row index
        y = col - 'A';
        execute_fire(attacker, defender, x, y);
    } else if (strcmp(command, "Radar") == 0 && attacker->radar_uses > 0) {
        char col;
        printf("Enter top-left radar coordinates (e.g., B3): ");
        scanf(" %c%d", &col, &x);
        x--; // Convert to zero-based row index
        y = col - 'A';
        execute_radar(attacker, defender, x, y);
        attacker->radar_uses--;
    } else if (strcmp(command, "Smoke") == 0 && attacker->smoke_screens > 0) {
        char col;
        printf("Enter top-left smoke screen coordinates (e.g., B3): ");
        scanf(" %c%d", &col, &x);
        x--; // Convert to zero-based row index
        y = col - 'A';
        execute_smoke(attacker, x, y);
        attacker->smoke_screens--;
    } else if (strcmp(command, "Artillery") == 0 && attacker->artillery_unlocked) {
        char col;
        printf("Enter top-left artillery coordinates (e.g., B3): ");
        scanf(" %c%d", &col, &x);
        x--; // Convert to zero-based row index
        y = col - 'A';
        execute_artillery(attacker, defender, x, y);
        attacker->artillery_unlocked = 0;
    } else if (strcmp(command, "Torpedo") == 0 && attacker->torpedo_unlocked) {
        printf("Enter row (1-10) or column (A-J) for torpedo strike: ");
        char target;
        scanf(" %c", &target);
        if (target >= '1' && target <= '9') {
            execute_torpedo(attacker, defender, target - '1', 0, 1);
        } else if (target >= 'A' && target <= 'J') {
            execute_torpedo(attacker, defender, 0, target - 'A', 0);
        }
        attacker->torpedo_unlocked = 0;
    } else {
        printf("Invalid command or insufficient uses left!\n");
    }
}

// Basic "Fire"
