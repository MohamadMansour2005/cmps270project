// Main function
int main() {
    Player p1, p2;

    // Initialize both players' grids with water
    char fillCharacter = '~'; // Define the character to fill the grid with
    initializeGrid(p1.cells, fillCharacter);
    initializeGrid(p2.cells, fillCharacter);
    initializeGrid(p1.opponent_grid, fillCharacter);
    initializeGrid(p2.opponent_grid, fillCharacter);
    p1.radar_sweeps_used = 0;
    p1.smoke_screens_used = 0;
    p2.radar_sweeps_used = 0;
    p2.smoke_screens_used = 0;

    // Get player names
    getPlayerNames(&p1, &p2);

    // Get difficulty level
    int difficulty = getDifficultyLevel();

    // Set initial ships left
    p1.ships_left = 4; // Assuming four ships for each player
    p2.ships_left = 4;

    // Place ships for both players
    placeShip(&p1);
    placeShip(&p2);

    // Game loop
    while (p1.ships_left > 0 && p2.ships_left > 0) {
        // Player 1's turn
        printf("\n%s's turn:\n", p1.playerName);
        executeFire(&p1, &p2);
        
        // Check for victory after firing
        if (p2.ships_left <= 0) {
            printf("%s wins!\n", p1.playerName);
            break;
        }

        executeRadarSweep(&p1, &p2);
        executeSmokeScreen(&p1);
        executeArtillery(&p1, &p2);
        
        // Player 2's turn
        printf("\n%s's turn:\n", p2.playerName);
        executeFire(&p2, &p1);
        
        // Check for victory after firing
        if (p1.ships_left <= 0) {
            printf("%s wins!\n", p2.playerName);
            break;
        }

        executeRadarSweep(&p2, &p1);
        executeSmokeScreen(&p2);
        executeArtillery(&p2, &p1);
    }

    return 0; // Indicate successful completion
} 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define GRID_SIZE 10 // Define the size of the grid
#define MAX_RADAR_SWEEPS 3 // Maximum radar sweeps allowed
#define MAX_SMOKE_SCREENS 3 // Maximum smoke screens allowed

// Struct to  represent a player
typedef struct {
    char playerName[50];
    char cells[GRID_SIZE][GRID_SIZE]; // Grid for player
    char opponent_grid[GRID_SIZE][GRID_SIZE]; // Opponent's grid
    int ships_left; // Number of ships left
    int radar_sweeps_used; // Radar sweeps used
    int smoke_screens_used; // Smoke screens used
} Player;

// Function to initialize the grid with a specified character
void initializeGrid(char grid[GRID_SIZE][GRID_SIZE], char fillChar) {
    for (int i = 0; i < GRID_SIZE; i++) {
        for (int j = 0; j < GRID_SIZE; j++) {
            grid[i][j] = fillChar; // Fill each cell with water
        }
    }
}

// Function to display the grid
void displayGrid(const char grid[GRID_SIZE][GRID_SIZE]) {
    printf(" A B C D E F G H I J\n");
    for (int i = 0; i < GRID_SIZE; i++) {
        printf("%2d ", i + 1);
        for (int j = 0; j < GRID_SIZE; j++) {
            printf("%c ", grid[i][j]);
        }
        printf("\n");
    }
}

// Function to get player names
void getPlayerNames(Player *player1, Player *player2) {
    printf("Enter name for Player 1: ");
    scanf("%s", player1->playerName);
    printf("Enter name for Player 2: ");
    scanf("%s", player2->playerName);
}

// Function to get difficulty level
int getDifficultyLevel() {
    int difficulty;
    printf("Select difficulty level (1 for Easy, 2 for Hard): ");
    scanf("%d", &difficulty);
    return difficulty;
}

// Function to print the grid
void printGrid(Player *p) {
    displayGrid(p->cells);
}

// Function to place ships on the grid
int placeShipHelper(Player *p, int num_of_cells_for_ship) {
    char choice;
    printf("\nRemember your ship takes %d cells. Would you like to place your ship vertically (V) or horizontally (H)? ", num_of_cells_for_ship);
    scanf(" %c", &choice);
    printf("Please enter which cell you would like your ship to begin (e.g., A1): ");
    char cell[3];
    scanf("%s", cell);

    int row = cell[1] - '1'; // conversion from ASCII code
    int col = cell[0] - 'A';

    if (choice == 'V') {
        if (row + num_of_cells_for_ship > 9) {
            printf("Ship cannot fit!\n");
            return 0;
        } else {
            for (int i = 0; i < num_of_cells_for_ship; i++) {
                if(p->cells[row + i][col] == '#'){
                    printf("A ship already exists in one of these cells!\n");
                    return 0;
                }
            }
        }
        for (int i = 0; i < num_of_cells_for_ship; i++) {
            p->cells[row + i][col] = '#';
        }
    } else if (choice == 'H') {
        if (col + num_of_cells_for_ship > 9) {
            printf("Ship cannot fit!\n");
            return 0;
        } else {
            for (int i = 0; i < num_of_cells_for_ship; i++) {
                if(p->cells[row][col + i] == '#'){
                    printf("A ship already exists in one of these cells!\n");
                    return 0;
                }
            }
        }
        for (int i = 0; i < num_of_cells_for_ship; i++) {
            p->cells[row][col + i] = '#';
        }
    } else {
        printf("Invalid choice!\n");
        return 0;
    }
    printGrid(p);
    return 1;
}

// Function to place ships for a player
void placeShip(Player *p){
    printf("Let's start filling the ships! %s\n", p->playerName);

    int is_carrier_placed = 0;
    while(is_carrier_placed == 0){
        is_carrier_placed = placeShipHelper(p, 5);
    }

    printf("\nLet's now place your battleship!\n");
    int is_battleship_placed = 0;
    while(is_battleship_placed == 0){
        is_battleship_placed = placeShipHelper(p, 4);
    }

    printf("\nLet's now place your destroyer!\n");
    int is_destroyer_placed = 0;
    while(is_destroyer_placed == 0){
        is_destroyer_placed = placeShipHelper(p, 3);
    }

    printf("\nLet's now place your submarine!\n");
    int is_submarine_placed = 0;
    while(is_submarine_placed == 0){
        is_submarine_placed = placeShipHelper(p, 2);
    }

    printGrid(p);
}

// Function to fire at the opponent
void fire(Player *attacker, Player *being_attacked) {
    char coordinates[3];
    printf("\nPlease enter coordinates of where you want to attack (e.g., A1): ");
    scanf("%s", coordinates);
    int row = coordinates[1] - '1';
    int col = coordinates[0] - 'A';

    if (row < 0 || row >= GRID_SIZE || col < 0 || col >= GRID_SIZE) {
        printf("Invalid coordinates! You lose your turn.\n");
        return;
    }

    if (being_attacked->cells[row][col] == '~') {
        attacker->opponent_grid[row][col] = 'o';
        printf("Miss!!\n");
    } else if (being_attacked->cells[row][col] == '#') {
        attacker->opponent_grid[row][col] = '*';
        printf("Hit!!\n");
        being_attacked->ships_left--; // Reduce the count of ships left
        if (being_attacked->ships_left == 0) {
            printf("%s has sunk a ship!\n", attacker->playerName);
        }
    } else {
        printf("You have already targeted this location.\n");
    }
}

// Execute functions for each move
void executeFire(Player *attacker, Player *defender)
