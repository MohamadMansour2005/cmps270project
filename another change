#include <stdio.h>

char difficulty;

struct Player{//guys add anything else that can be usefulfor your code
    char name[20];
    char player_grid[10][10];
    char opponent_grid[10][10];
    int ships_left;
    char command[20];
};

int printGrid(struct Player p){//tobe changed by Tala , i dont know if needs more change i made it so it can handle both difficulty modes 
    for(int i = 0; i < 10; i++){
        for(int j = 0; j < 10; j++){
             if (difficulty == 'E' ){

                  printf("%c ", p.player_grid[i][j]); 
             }else {
                if (p.player_grid[i][j]=='o'){
                    printf("~ ");
                }else {
                    printf("%c ", p.player_grid[i][j]); 
                }
             }
            
        }
        printf("\n");
    }
    return 0;
}


int placeShipHelper(struct Player *p, int num_of_cells_for_ship) { // Use pointer to Player
    char choice;
    printf("\nRemember your ship takes %d cells. Would you like to place your ship vertically (V) or horizontally (H)? ", num_of_cells_for_ship);
    scanf(" %c", &choice);
    printf("Please enter which cell you would like your ship to begin (e.g., A1): ");
    char cell[3];
    scanf("%s", cell);

    int row = cell[1] - '1'; // conversion from ASCII code
    int col = cell[0] - 'A';

    if (choice == 'V') {
        if (row + num_of_cells_for_ship > 9) {
            printf("Ship cannot fit!\n");
        } else {
            for (int i = 0; i < num_of_cells_for_ship; i++) {
                if(p->player_grid[row + i][col] == '#'){
                    printf("A ship already exists in one of these cells!");
                    return 0;
                }
            }
        }
    } else if (choice == 'H') {
        if (col + num_of_cells_for_ship > 9) {
            printf("Ship cannot fit!\n");
        } else {
            for (int i = 0; i < num_of_cells_for_ship; i++) {
                if(p->player_grid[row][col +i] == '#'){
                    printf("A ship already exists in one of these cells!");
                    return 0;
                }
            }
        }
    }


    if (choice == 'V') {
        for (int i = 0; i < num_of_cells_for_ship; i++) {
            p->player_grid[row + i][col] = '#';
        }
        printGrid(*p);
        return 1;
    }
    else if (choice == 'H') {
        for (int i = 0; i < num_of_cells_for_ship; i++) {
            p->player_grid[row][col + i] = '#';
        }
        printGrid(*p);
        return 1;
    }

    return 0; // Return 0 if placement was unsuccessful
}

int placeShip(struct Player *p){
    printf("Let's start filling the ships! %s\nLet's start with placing a carrier.\n", p->name);

    int is_carrier_placed = 0;
    while(is_carrier_placed == 0){
        is_carrier_placed = placeShipHelper(p, 5);
    }

    printf("\nLet's now place your battleship!");
    int is_battleship_placed = 0;
    while(is_battleship_placed == 0){
        is_battleship_placed = placeShipHelper(p, 4);
    }

    printf("\nLet's now place your destroyer!");
    int is_destroyer_placed = 0;
    while(is_destroyer_placed == 0){
        is_destroyer_placed = placeShipHelper(p, 3);
    }

    printf("\nLet's now place your submarine!");
    int is_submarine_placed = 0;
    while(is_submarine_placed == 0){
        is_submarine_placed = placeShipHelper(p, 2);
    }

    printGrid(*p);
    return 0;
}

int fire(struct Player *attacker, struct Player *being_attacked){
    char coordinates[2];
    printf("\nPlease enter coordinates of where you want to attack. ");
    scanf("%s", coordinates);
    int row = coordinates[0] - '1';
    int col = coordinates[1] - 'A';

    if(being_attacked->player_grid[row][col] == '~'){
        attacker->opponent_grid[row][col] == 'o';
        printf("Miss!!");
    }

    if(being_attacked->player_grid[row][col] == '#'){
        attacker->opponent_grid[row][col] == '*';
        printf("Hit!!");
    }

    
}

int RadarSweep(struct Player *attacker ,struct Player *being_attacked){ 
    
}

int checkIfShipDown(struct Player *player, int row, int col) {
    int i = row;
    while (i >= 0 && player->player_grid[i][col] == '#') {
        i--;
    }
    i++;
    while (i < 10 && (player->player_grid[i][col] == '*' || player->player_grid[i][col] == '#')) {
        if (player->player_grid[i][col] == '#') {
            return 0;
        }
        i++;
    }

    int j = col;
    while (j >= 0 && player->player_grid[row][j] == '#') {
        j--;
    }
    j++;
    while (j < 10 && (player->player_grid[row][j] == '*' || player->player_grid[row][j] == '#')) {
        if (player->player_grid[row][j] == '#') {
            return 0;
        }
        j++;
    }

    player->ships_left--;
    return 1;
}

int main(){
    struct Player p1;
    struct Player p2;

    printf("Please enter name of player one: ");
    scanf("%s",&p1.name);
    printf("Please enter the name of player two: ");
    scanf("%s",&p2.name);

    printf("please enter difficulty level: Easy (E) , Hard (H) ");
    scanf("%c",&difficulty);


    p1.ships_left = 4;
    p2.ships_left = 4;


    for(int i = 0; i < 10; i++){
        for(int j = 0; j < 10; j++){
            p1.player_grid[i][j] = '~';
            p1.opponent_grid[i][j] = '~';
            p2.player_grid[i][j] = '~';
            p2.opponent_grid[i][j] = '~';
        }
    }

    printGrid(p1);
    placeShip(&p1);
    printGrid(p2);
    placeShip(&p2);

    

    while(p1.ships_left != 0 || p2.ships_left != 0){
        printf("player one enter your command : ");
        scanf("s",&p1.command);
    }

    return 0;
}
